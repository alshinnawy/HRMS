/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface DepartmentsDao
{
	/** 
	 * Inserts a new row in the DEPARTMENTS table.
	 */
	public DepartmentsPk insert(Departments dto) throws DepartmentsDaoException;

	/** 
	 * Updates a single row in the DEPARTMENTS table.
	 */
	public void update(DepartmentsPk pk, Departments dto) throws DepartmentsDaoException;

	/** 
	 * Deletes a single row in the DEPARTMENTS table.
	 */
	public void delete(DepartmentsPk pk) throws DepartmentsDaoException;

	/** 
	 * Returns the rows from the DEPARTMENTS table that matches the specified primary-key value.
	 */
	public Departments findByPrimaryKey(DepartmentsPk pk) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public Departments findByPrimaryKey(int departmentId) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria ''.
	 */
	public Departments[] findAll() throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'PARENT_DEPT_ID = :parentDeptId'.
	 */
	public Departments[] findByDepartments(int parentDeptId) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'SECTOR_ID = :sectorId'.
	 */
	public Departments[] findBySectors(int sectorId) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public Departments[] findWhereDepartmentIdEquals(int departmentId) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'DEPARTMENT_NAME = :departmentName'.
	 */
	public Departments[] findWhereDepartmentNameEquals(String departmentName) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'PARENT_DEPT_ID = :parentDeptId'.
	 */
	public Departments[] findWhereParentDeptIdEquals(int parentDeptId) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the criteria 'SECTOR_ID = :sectorId'.
	 */
	public Departments[] findWhereSectorIdEquals(int sectorId) throws DepartmentsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the specified arbitrary SQL statement
	 */
	public Departments[] findByDynamicSelect(String sql, Object[] sqlParams) throws DepartmentsDaoException;

	/** 
	 * Returns all rows from the DEPARTMENTS table that match the specified arbitrary SQL statement
	 */
	public Departments[] findByDynamicWhere(String sql, Object[] sqlParams) throws DepartmentsDaoException;

}
