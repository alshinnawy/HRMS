/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface PermitSideDao
{
	/** 
	 * Inserts a new row in the PERMIT_SIDE table.
	 */
	public PermitSidePk insert(PermitSide dto) throws PermitSideDaoException;

	/** 
	 * Updates a single row in the PERMIT_SIDE table.
	 */
	public void update(PermitSidePk pk, PermitSide dto) throws PermitSideDaoException;

	/** 
	 * Deletes a single row in the PERMIT_SIDE table.
	 */
	public void delete(PermitSidePk pk) throws PermitSideDaoException;

	/** 
	 * Returns the rows from the PERMIT_SIDE table that matches the specified primary-key value.
	 */
	public PermitSide findByPrimaryKey(PermitSidePk pk) throws PermitSideDaoException;

	/** 
	 * Returns all rows from the PERMIT_SIDE table that match the criteria 'PERMIT_SIDE_ID = :permitSideId'.
	 */
	public PermitSide findByPrimaryKey(int permitSideId) throws PermitSideDaoException;

	/** 
	 * Returns all rows from the PERMIT_SIDE table that match the criteria ''.
	 */
	public PermitSide[] findAll() throws PermitSideDaoException;

	/** 
	 * Returns all rows from the PERMIT_SIDE table that match the criteria 'PERMIT_SIDE_ID = :permitSideId'.
	 */
	public PermitSide[] findWherePermitSideIdEquals(int permitSideId) throws PermitSideDaoException;

	/** 
	 * Returns all rows from the PERMIT_SIDE table that match the criteria 'PERMIT_SIDE_NAME = :permitSideName'.
	 */
	public PermitSide[] findWherePermitSideNameEquals(String permitSideName) throws PermitSideDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PERMIT_SIDE table that match the specified arbitrary SQL statement
	 */
	public PermitSide[] findByDynamicSelect(String sql, Object[] sqlParams) throws PermitSideDaoException;

	/** 
	 * Returns all rows from the PERMIT_SIDE table that match the specified arbitrary SQL statement
	 */
	public PermitSide[] findByDynamicWhere(String sql, Object[] sqlParams) throws PermitSideDaoException;

}
