/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface CountriesDao
{
	/** 
	 * Inserts a new row in the COUNTRIES table.
	 */
	public CountriesPk insert(Countries dto) throws CountriesDaoException;

	/** 
	 * Updates a single row in the COUNTRIES table.
	 */
	public void update(CountriesPk pk, Countries dto) throws CountriesDaoException;

	/** 
	 * Deletes a single row in the COUNTRIES table.
	 */
	public void delete(CountriesPk pk) throws CountriesDaoException;

	/** 
	 * Returns the rows from the COUNTRIES table that matches the specified primary-key value.
	 */
	public Countries findByPrimaryKey(CountriesPk pk) throws CountriesDaoException;

	/** 
	 * Returns all rows from the COUNTRIES table that match the criteria 'COUNTRY_ID = :countryId'.
	 */
	public Countries findByPrimaryKey(int countryId) throws CountriesDaoException;

	/** 
	 * Returns all rows from the COUNTRIES table that match the criteria ''.
	 */
	public Countries[] findAll() throws CountriesDaoException;

	/** 
	 * Returns all rows from the COUNTRIES table that match the criteria 'COUNTRY_ID = :countryId'.
	 */
	public Countries[] findWhereCountryIdEquals(int countryId) throws CountriesDaoException;

	/** 
	 * Returns all rows from the COUNTRIES table that match the criteria 'COUNTRY_NAME = :countryName'.
	 */
	public Countries[] findWhereCountryNameEquals(String countryName) throws CountriesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the COUNTRIES table that match the specified arbitrary SQL statement
	 */
	public Countries[] findByDynamicSelect(String sql, Object[] sqlParams) throws CountriesDaoException;

	/** 
	 * Returns all rows from the COUNTRIES table that match the specified arbitrary SQL statement
	 */
	public Countries[] findByDynamicWhere(String sql, Object[] sqlParams) throws CountriesDaoException;

}
