/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface ProjectsDao
{
	/** 
	 * Inserts a new row in the PROJECTS table.
	 */
	public ProjectsPk insert(Projects dto) throws ProjectsDaoException;

	/** 
	 * Updates a single row in the PROJECTS table.
	 */
	public void update(ProjectsPk pk, Projects dto) throws ProjectsDaoException;

	/** 
	 * Deletes a single row in the PROJECTS table.
	 */
	public void delete(ProjectsPk pk) throws ProjectsDaoException;

	/** 
	 * Returns the rows from the PROJECTS table that matches the specified primary-key value.
	 */
	public Projects findByPrimaryKey(ProjectsPk pk) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the PROJECTS table that match the criteria 'PROJECT_ID = :projectId'.
	 */
	public Projects findByPrimaryKey(int projectId) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the PROJECTS table that match the criteria ''.
	 */
	public Projects[] findAll() throws ProjectsDaoException;

	/** 
	 * Returns all rows from the PROJECTS table that match the criteria 'PROJECT_ID = :projectId'.
	 */
	public Projects[] findWhereProjectIdEquals(int projectId) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the PROJECTS table that match the criteria 'PROJECT_NAME = :projectName'.
	 */
	public Projects[] findWhereProjectNameEquals(String projectName) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the PROJECTS table that match the criteria 'PROJECT_DESCRIPTION = :projectDescription'.
	 */
	public Projects[] findWhereProjectDescriptionEquals(String projectDescription) throws ProjectsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PROJECTS table that match the specified arbitrary SQL statement
	 */
	public Projects[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the PROJECTS table that match the specified arbitrary SQL statement
	 */
	public Projects[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectsDaoException;

}
