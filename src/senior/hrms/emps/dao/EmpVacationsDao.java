/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EmpVacationsDao
{
	/** 
	 * Inserts a new row in the EMP_VACATIONS table.
	 */
	public EmpVacationsPk insert(EmpVacations dto) throws EmpVacationsDaoException;

	/** 
	 * Updates a single row in the EMP_VACATIONS table.
	 */
	public void update(EmpVacationsPk pk, EmpVacations dto) throws EmpVacationsDaoException;

	/** 
	 * Deletes a single row in the EMP_VACATIONS table.
	 */
	public void delete(EmpVacationsPk pk) throws EmpVacationsDaoException;

	/** 
	 * Returns the rows from the EMP_VACATIONS table that matches the specified primary-key value.
	 */
	public EmpVacations findByPrimaryKey(EmpVacationsPk pk) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'EMP_VACATION_ID = :empVacationId'.
	 */
	public EmpVacations findByPrimaryKey(long empVacationId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria ''.
	 */
	public EmpVacations[] findAll() throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'REQUEST_EMP_ID = :requestEmpId'.
	 */
	public EmpVacations[] findByEmployees(int requestEmpId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmpVacations[] findByEmployees2(int employeeId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'DECISION_EMP_ID = :decisionEmpId'.
	 */
	public EmpVacations[] findByEmployees3(int decisionEmpId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'FINANCIAL_YEAR_ID = :financialYearId'.
	 */
	public EmpVacations[] findByFinancialYears(int financialYearId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'VACATION_TYPE_ID = :vacationTypeId'.
	 */
	public EmpVacations[] findByVacationsTypes(int vacationTypeId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'VACATION_REQUEST_STATUS_ID = :vacationRequestStatusId'.
	 */
	public EmpVacations[] findByVacationRequestStatus(int vacationRequestStatusId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'EMP_VACATION_ID = :empVacationId'.
	 */
	public EmpVacations[] findWhereEmpVacationIdEquals(long empVacationId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmpVacations[] findWhereEmployeeIdEquals(int employeeId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'VACATION_TYPE_ID = :vacationTypeId'.
	 */
	public EmpVacations[] findWhereVacationTypeIdEquals(int vacationTypeId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'FINANCIAL_YEAR_ID = :financialYearId'.
	 */
	public EmpVacations[] findWhereFinancialYearIdEquals(int financialYearId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'DATE_FROM = :dateFrom'.
	 */
	public EmpVacations[] findWhereDateFromEquals(Date dateFrom) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'DATE_TO = :dateTo'.
	 */
	public EmpVacations[] findWhereDateToEquals(Date dateTo) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'REQUEST_EMP_ID = :requestEmpId'.
	 */
	public EmpVacations[] findWhereRequestEmpIdEquals(int requestEmpId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'VACATION_REQUEST_STATUS_ID = :vacationRequestStatusId'.
	 */
	public EmpVacations[] findWhereVacationRequestStatusIdEquals(int vacationRequestStatusId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'DECISION_EMP_ID = :decisionEmpId'.
	 */
	public EmpVacations[] findWhereDecisionEmpIdEquals(int decisionEmpId) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'DECISION_DATE = :decisionDate'.
	 */
	public EmpVacations[] findWhereDecisionDateEquals(Date decisionDate) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the criteria 'NOTE = :note'.
	 */
	public EmpVacations[] findWhereNoteEquals(String note) throws EmpVacationsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the specified arbitrary SQL statement
	 */
	public EmpVacations[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpVacationsDaoException;

	/** 
	 * Returns all rows from the EMP_VACATIONS table that match the specified arbitrary SQL statement
	 */
	public EmpVacations[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpVacationsDaoException;

}
