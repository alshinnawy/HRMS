/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface AccidentReasonsDao
{
	/** 
	 * Inserts a new row in the ACCIDENT_REASONS table.
	 */
	public AccidentReasonsPk insert(AccidentReasons dto) throws AccidentReasonsDaoException;

	/** 
	 * Updates a single row in the ACCIDENT_REASONS table.
	 */
	public void update(AccidentReasonsPk pk, AccidentReasons dto) throws AccidentReasonsDaoException;

	/** 
	 * Deletes a single row in the ACCIDENT_REASONS table.
	 */
	public void delete(AccidentReasonsPk pk) throws AccidentReasonsDaoException;

	/** 
	 * Returns the rows from the ACCIDENT_REASONS table that matches the specified primary-key value.
	 */
	public AccidentReasons findByPrimaryKey(AccidentReasonsPk pk) throws AccidentReasonsDaoException;

	/** 
	 * Returns all rows from the ACCIDENT_REASONS table that match the criteria 'ACCIDENT_REASON_ID = :accidentReasonId'.
	 */
	public AccidentReasons findByPrimaryKey(int accidentReasonId) throws AccidentReasonsDaoException;

	/** 
	 * Returns all rows from the ACCIDENT_REASONS table that match the criteria ''.
	 */
	public AccidentReasons[] findAll() throws AccidentReasonsDaoException;

	/** 
	 * Returns all rows from the ACCIDENT_REASONS table that match the criteria 'ACCIDENT_REASON_ID = :accidentReasonId'.
	 */
	public AccidentReasons[] findWhereAccidentReasonIdEquals(int accidentReasonId) throws AccidentReasonsDaoException;

	/** 
	 * Returns all rows from the ACCIDENT_REASONS table that match the criteria 'ACCIDENT_REASON = :accidentReason'.
	 */
	public AccidentReasons[] findWhereAccidentReasonEquals(String accidentReason) throws AccidentReasonsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ACCIDENT_REASONS table that match the specified arbitrary SQL statement
	 */
	public AccidentReasons[] findByDynamicSelect(String sql, Object[] sqlParams) throws AccidentReasonsDaoException;

	/** 
	 * Returns all rows from the ACCIDENT_REASONS table that match the specified arbitrary SQL statement
	 */
	public AccidentReasons[] findByDynamicWhere(String sql, Object[] sqlParams) throws AccidentReasonsDaoException;

}
