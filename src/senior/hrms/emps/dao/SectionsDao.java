/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface SectionsDao
{
	/** 
	 * Inserts a new row in the SECTIONS table.
	 */
	public SectionsPk insert(Sections dto) throws SectionsDaoException;

	/** 
	 * Updates a single row in the SECTIONS table.
	 */
	public void update(SectionsPk pk, Sections dto) throws SectionsDaoException;

	/** 
	 * Deletes a single row in the SECTIONS table.
	 */
	public void delete(SectionsPk pk) throws SectionsDaoException;

	/** 
	 * Returns the rows from the SECTIONS table that matches the specified primary-key value.
	 */
	public Sections findByPrimaryKey(SectionsPk pk) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'SECTION_ID = :sectionId'.
	 */
	public Sections findByPrimaryKey(int sectionId) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria ''.
	 */
	public Sections[] findAll() throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public Sections[] findByDepartments(int departmentId) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'SECTION_PARENT_ID = :sectionParentId'.
	 */
	public Sections[] findBySections(int sectionParentId) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'SECTION_ID = :sectionId'.
	 */
	public Sections[] findWhereSectionIdEquals(int sectionId) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'SECTION_NAME = :sectionName'.
	 */
	public Sections[] findWhereSectionNameEquals(String sectionName) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'SECTION_PARENT_ID = :sectionParentId'.
	 */
	public Sections[] findWhereSectionParentIdEquals(int sectionParentId) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public Sections[] findWhereDepartmentIdEquals(int departmentId) throws SectionsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the SECTIONS table that match the specified arbitrary SQL statement
	 */
	public Sections[] findByDynamicSelect(String sql, Object[] sqlParams) throws SectionsDaoException;

	/** 
	 * Returns all rows from the SECTIONS table that match the specified arbitrary SQL statement
	 */
	public Sections[] findByDynamicWhere(String sql, Object[] sqlParams) throws SectionsDaoException;

}
