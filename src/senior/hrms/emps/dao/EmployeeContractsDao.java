/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.util.Date;
import java.math.BigDecimal;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EmployeeContractsDao
{
	/** 
	 * Inserts a new row in the EMPLOYEE_CONTRACTS table.
	 */
	public EmployeeContractsPk insert(EmployeeContracts dto) throws EmployeeContractsDaoException;

	/** 
	 * Updates a single row in the EMPLOYEE_CONTRACTS table.
	 */
	public void update(EmployeeContractsPk pk, EmployeeContracts dto) throws EmployeeContractsDaoException;

	/** 
	 * Deletes a single row in the EMPLOYEE_CONTRACTS table.
	 */
	public void delete(EmployeeContractsPk pk) throws EmployeeContractsDaoException;

	/** 
	 * Returns the rows from the EMPLOYEE_CONTRACTS table that matches the specified primary-key value.
	 */
	public EmployeeContracts findByPrimaryKey(EmployeeContractsPk pk) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMP_CONTRACT_ID = :empContractId'.
	 */
	public EmployeeContracts findByPrimaryKey(int empContractId) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria ''.
	 */
	public EmployeeContracts[] findAll() throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmployeeContracts[] findByEmployees(int employeeId) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMP_CONTRACT_ID = :empContractId'.
	 */
	public EmployeeContracts[] findWhereEmpContractIdEquals(int empContractId) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'CONTRACT_CODE = :contractCode'.
	 */
	public EmployeeContracts[] findWhereContractCodeEquals(String contractCode) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmployeeContracts[] findWhereEmployeeIdEquals(int employeeId) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'START_DATE = :startDate'.
	 */
	public EmployeeContracts[] findWhereStartDateEquals(Date startDate) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'END_DATE = :endDate'.
	 */
	public EmployeeContracts[] findWhereEndDateEquals(Date endDate) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'BASIC_SALARY = :basicSalary'.
	 */
	public EmployeeContracts[] findWhereBasicSalaryEquals(BigDecimal basicSalary) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'ALLOWANCE_VALUE = :allowanceValue'.
	 */
	public EmployeeContracts[] findWhereAllowanceValueEquals(BigDecimal allowanceValue) throws EmployeeContractsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the specified arbitrary SQL statement
	 */
	public EmployeeContracts[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmployeeContractsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the specified arbitrary SQL statement
	 */
	public EmployeeContracts[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmployeeContractsDaoException;

}
