/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface MilitaryPostponedDao
{
	/** 
	 * Inserts a new row in the MILITARY_POSTPONED table.
	 */
	public MilitaryPostponedPk insert(MilitaryPostponed dto) throws MilitaryPostponedDaoException;

	/** 
	 * Updates a single row in the MILITARY_POSTPONED table.
	 */
	public void update(MilitaryPostponedPk pk, MilitaryPostponed dto) throws MilitaryPostponedDaoException;

	/** 
	 * Deletes a single row in the MILITARY_POSTPONED table.
	 */
	public void delete(MilitaryPostponedPk pk) throws MilitaryPostponedDaoException;

	/** 
	 * Returns the rows from the MILITARY_POSTPONED table that matches the specified primary-key value.
	 */
	public MilitaryPostponed findByPrimaryKey(MilitaryPostponedPk pk) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'MIL_POSTPONED_ID = :milPostponedId'.
	 */
	public MilitaryPostponed findByPrimaryKey(int milPostponedId) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria ''.
	 */
	public MilitaryPostponed[] findAll() throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public MilitaryPostponed[] findByEmployees(int employeeId) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'MIL_POSTPONED_ID = :milPostponedId'.
	 */
	public MilitaryPostponed[] findWhereMilPostponedIdEquals(int milPostponedId) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public MilitaryPostponed[] findWhereEmployeeIdEquals(int employeeId) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'POSTPONED_DATE = :postponedDate'.
	 */
	public MilitaryPostponed[] findWherePostponedDateEquals(Date postponedDate) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'MILITARY_REPORT_IMAGE = :militaryReportImage'.
	 */
	public MilitaryPostponed[] findWhereMilitaryReportImageEquals(byte[] militaryReportImage) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the criteria 'MILITARY_POSTPONED_NOTE = :militaryPostponedNote'.
	 */
	public MilitaryPostponed[] findWhereMilitaryPostponedNoteEquals(String militaryPostponedNote) throws MilitaryPostponedDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the specified arbitrary SQL statement
	 */
	public MilitaryPostponed[] findByDynamicSelect(String sql, Object[] sqlParams) throws MilitaryPostponedDaoException;

	/** 
	 * Returns all rows from the MILITARY_POSTPONED table that match the specified arbitrary SQL statement
	 */
	public MilitaryPostponed[] findByDynamicWhere(String sql, Object[] sqlParams) throws MilitaryPostponedDaoException;

}
