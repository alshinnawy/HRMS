/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EmployeeJobsDao
{
	/** 
	 * Inserts a new row in the EMPLOYEE_JOBS table.
	 */
	public EmployeeJobsPk insert(EmployeeJobs dto) throws EmployeeJobsDaoException;

	/** 
	 * Updates a single row in the EMPLOYEE_JOBS table.
	 */
	public void update(EmployeeJobsPk pk, EmployeeJobs dto) throws EmployeeJobsDaoException;

	/** 
	 * Deletes a single row in the EMPLOYEE_JOBS table.
	 */
	public void delete(EmployeeJobsPk pk) throws EmployeeJobsDaoException;

	/** 
	 * Returns the rows from the EMPLOYEE_JOBS table that matches the specified primary-key value.
	 */
	public EmployeeJobs findByPrimaryKey(EmployeeJobsPk pk) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'EMPLOYEE_JOB_ID = :employeeJobId'.
	 */
	public EmployeeJobs findByPrimaryKey(int employeeJobId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria ''.
	 */
	public EmployeeJobs[] findAll() throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public EmployeeJobs[] findByDepartments(int departmentId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmployeeJobs[] findByEmployees(int employeeId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'REQUEST_EMP_ID = :requestEmpId'.
	 */
	public EmployeeJobs[] findByEmployees2(int requestEmpId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'APPROVED_EMP_ID = :approvedEmpId'.
	 */
	public EmployeeJobs[] findByEmployees3(int approvedEmpId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'EMPLOYEE_TYPE_ID = :employeeTypeId'.
	 */
	public EmployeeJobs[] findByEmployeeType(int employeeTypeId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'JOB_LEVEL_ID = :jobLevelId'.
	 */
	public EmployeeJobs[] findByJobLevel(int jobLevelId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'JOB_TITLE_ID = :jobTitleId'.
	 */
	public EmployeeJobs[] findByJobTitle(int jobTitleId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'SECTION_ID = :sectionId'.
	 */
	public EmployeeJobs[] findBySections(int sectionId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'SECTOR_ID = :sectorId'.
	 */
	public EmployeeJobs[] findBySectors(int sectorId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'EMPLOYEE_JOB_ID = :employeeJobId'.
	 */
	public EmployeeJobs[] findWhereEmployeeJobIdEquals(int employeeJobId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmployeeJobs[] findWhereEmployeeIdEquals(int employeeId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'JOB_TITLE_ID = :jobTitleId'.
	 */
	public EmployeeJobs[] findWhereJobTitleIdEquals(int jobTitleId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'JOB_LEVEL_ID = :jobLevelId'.
	 */
	public EmployeeJobs[] findWhereJobLevelIdEquals(int jobLevelId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'SECTOR_ID = :sectorId'.
	 */
	public EmployeeJobs[] findWhereSectorIdEquals(int sectorId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public EmployeeJobs[] findWhereDepartmentIdEquals(int departmentId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'SECTION_ID = :sectionId'.
	 */
	public EmployeeJobs[] findWhereSectionIdEquals(int sectionId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'JOIN_DATE = :joinDate'.
	 */
	public EmployeeJobs[] findWhereJoinDateEquals(Date joinDate) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'CURRENT_JOB = :currentJob'.
	 */
	public EmployeeJobs[] findWhereCurrentJobEquals(int currentJob) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'IS_MANAGER = :isManager'.
	 */
	public EmployeeJobs[] findWhereIsManagerEquals(int isManager) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'CURRENT_MANAGER = :currentManager'.
	 */
	public EmployeeJobs[] findWhereCurrentManagerEquals(int currentManager) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'REQUEST_DATE = :requestDate'.
	 */
	public EmployeeJobs[] findWhereRequestDateEquals(Date requestDate) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'REQUEST_EMP_ID = :requestEmpId'.
	 */
	public EmployeeJobs[] findWhereRequestEmpIdEquals(int requestEmpId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'APPROVED_EMP_ID = :approvedEmpId'.
	 */
	public EmployeeJobs[] findWhereApprovedEmpIdEquals(int approvedEmpId) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the criteria 'EMPLOYEE_TYPE_ID = :employeeTypeId'.
	 */
	public EmployeeJobs[] findWhereEmployeeTypeIdEquals(int employeeTypeId) throws EmployeeJobsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the specified arbitrary SQL statement
	 */
	public EmployeeJobs[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmployeeJobsDaoException;

	/** 
	 * Returns all rows from the EMPLOYEE_JOBS table that match the specified arbitrary SQL statement
	 */
	public EmployeeJobs[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmployeeJobsDaoException;

}
