/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EvaluationItemDao
{
	/** 
	 * Inserts a new row in the EVALUATION_ITEM table.
	 */
	public EvaluationItemPk insert(EvaluationItem dto) throws EvaluationItemDaoException;

	/** 
	 * Updates a single row in the EVALUATION_ITEM table.
	 */
	public void update(EvaluationItemPk pk, EvaluationItem dto) throws EvaluationItemDaoException;

	/** 
	 * Deletes a single row in the EVALUATION_ITEM table.
	 */
	public void delete(EvaluationItemPk pk) throws EvaluationItemDaoException;

	/** 
	 * Returns the rows from the EVALUATION_ITEM table that matches the specified primary-key value.
	 */
	public EvaluationItem findByPrimaryKey(EvaluationItemPk pk) throws EvaluationItemDaoException;

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the criteria 'EVALUATION_ITEM_ID = :evaluationItemId'.
	 */
	public EvaluationItem findByPrimaryKey(int evaluationItemId) throws EvaluationItemDaoException;

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the criteria ''.
	 */
	public EvaluationItem[] findAll() throws EvaluationItemDaoException;

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the criteria 'EVALUATION_ITEM_ID = :evaluationItemId'.
	 */
	public EvaluationItem[] findWhereEvaluationItemIdEquals(int evaluationItemId) throws EvaluationItemDaoException;

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the criteria 'EVALUATION_ITEM_NAME = :evaluationItemName'.
	 */
	public EvaluationItem[] findWhereEvaluationItemNameEquals(String evaluationItemName) throws EvaluationItemDaoException;

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the criteria 'EVALUATION_ITEM_NOTE = :evaluationItemNote'.
	 */
	public EvaluationItem[] findWhereEvaluationItemNoteEquals(String evaluationItemNote) throws EvaluationItemDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the specified arbitrary SQL statement
	 */
	public EvaluationItem[] findByDynamicSelect(String sql, Object[] sqlParams) throws EvaluationItemDaoException;

	/** 
	 * Returns all rows from the EVALUATION_ITEM table that match the specified arbitrary SQL statement
	 */
	public EvaluationItem[] findByDynamicWhere(String sql, Object[] sqlParams) throws EvaluationItemDaoException;

}
