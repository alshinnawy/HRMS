/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface UsersRolesDao
{
	/** 
	 * Inserts a new row in the USERS_ROLES table.
	 */
	public UsersRolesPk insert(UsersRoles dto) throws UsersRolesDaoException;

	/** 
	 * Updates a single row in the USERS_ROLES table.
	 */
	public void update(UsersRolesPk pk, UsersRoles dto) throws UsersRolesDaoException;

	/** 
	 * Deletes a single row in the USERS_ROLES table.
	 */
	public void delete(UsersRolesPk pk) throws UsersRolesDaoException;

	/** 
	 * Returns the rows from the USERS_ROLES table that matches the specified primary-key value.
	 */
	public UsersRoles findByPrimaryKey(UsersRolesPk pk) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'USER_ROLE_ID = :userRoleId'.
	 */
	public UsersRoles findByPrimaryKey(int userRoleId) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria ''.
	 */
	public UsersRoles[] findAll() throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'ROLE_ID = :roleId'.
	 */
	public UsersRoles[] findByRoles(int roleId) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'USER_ID = :userId'.
	 */
	public UsersRoles[] findByUsers(int userId) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'USER_ROLE_ID = :userRoleId'.
	 */
	public UsersRoles[] findWhereUserRoleIdEquals(int userRoleId) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'USER_ID = :userId'.
	 */
	public UsersRoles[] findWhereUserIdEquals(int userId) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'ROLE_ID = :roleId'.
	 */
	public UsersRoles[] findWhereRoleIdEquals(int roleId) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the criteria 'DESCRIPTION = :description'.
	 */
	public UsersRoles[] findWhereDescriptionEquals(String description) throws UsersRolesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the USERS_ROLES table that match the specified arbitrary SQL statement
	 */
	public UsersRoles[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsersRolesDaoException;

	/** 
	 * Returns all rows from the USERS_ROLES table that match the specified arbitrary SQL statement
	 */
	public UsersRoles[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsersRolesDaoException;

}
