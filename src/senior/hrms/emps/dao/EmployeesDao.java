/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EmployeesDao
{
	/** 
	 * Inserts a new row in the EMPLOYEES table.
	 */
	public EmployeesPk insert(Employees dto) throws EmployeesDaoException;

	/** 
	 * Updates a single row in the EMPLOYEES table.
	 */
	public void update(EmployeesPk pk, Employees dto) throws EmployeesDaoException;

	/** 
	 * Deletes a single row in the EMPLOYEES table.
	 */
	public void delete(EmployeesPk pk) throws EmployeesDaoException;

	/** 
	 * Returns the rows from the EMPLOYEES table that matches the specified primary-key value.
	 */
	public Employees findByPrimaryKey(EmployeesPk pk) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public Employees findByPrimaryKey(int employeeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria ''.
	 */
	public Employees[] findAll() throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BLOOD_CATEGORY_ID = :bloodCategoryId'.
	 */
	public Employees[] findByBloodCategories(int bloodCategoryId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BUS_LINE_AREA_ID = :busLineAreaId'.
	 */
	public Employees[] findByBusLineAreas(int busLineAreaId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CAR_LICENCE_TYPE_ID = :carLicenceTypeId'.
	 */
	public Employees[] findByCarLicenceType(int carLicenceTypeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CITY_ID = :cityId'.
	 */
	public Employees[] findByCities(int cityId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'COUNTRY_ID = :countryId'.
	 */
	public Employees[] findByCountries(int countryId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'DRIVER_MODERATOR_LINE_ID = :driverModeratorLineId'.
	 */
	public Employees[] findByDriversModeratorsLines(int driverModeratorLineId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'HEALTH_CARE_ID = :healthCareId'.
	 */
	public Employees[] findByEmpHealthCare(int healthCareId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_STATUS_ID = :empStatusId'.
	 */
	public Employees[] findByEmpStatus(int empStatusId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MARITAL_STATUS_ID = :maritalStatusId'.
	 */
	public Employees[] findByMaritalStatus(int maritalStatusId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MILITARY_STATUS_ID = :militaryStatusId'.
	 */
	public Employees[] findByMilitaryStatus(int militaryStatusId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'RELIGION_ID = :religionId'.
	 */
	public Employees[] findByReligion(int religionId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public Employees[] findWhereEmployeeIdEquals(int employeeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_CODE = :employeeCode'.
	 */
	public Employees[] findWhereEmployeeCodeEquals(String employeeCode) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_FIRST_NAME = :employeeFirstName'.
	 */
	public Employees[] findWhereEmployeeFirstNameEquals(String employeeFirstName) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_MID_NAME = :employeeMidName'.
	 */
	public Employees[] findWhereEmployeeMidNameEquals(String employeeMidName) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_LAST_NAME = :employeeLastName'.
	 */
	public Employees[] findWhereEmployeeLastNameEquals(String employeeLastName) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_FAMILY_NAME = :employeeFamilyName'.
	 */
	public Employees[] findWhereEmployeeFamilyNameEquals(String employeeFamilyName) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_BIRTH_DATE = :employeeBirthDate'.
	 */
	public Employees[] findWhereEmployeeBirthDateEquals(Date employeeBirthDate) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_NID = :employeeNid'.
	 */
	public Employees[] findWhereEmployeeNidEquals(String employeeNid) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_NID_ADDRESS = :empNidAddress'.
	 */
	public Employees[] findWhereEmpNidAddressEquals(String empNidAddress) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Employees[] findWherePassportIdEquals(int passportId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'GENDER = :gender'.
	 */
	public Employees[] findWhereGenderEquals(String gender) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ADDRESS = :employeeAddress'.
	 */
	public Employees[] findWhereEmployeeAddressEquals(String employeeAddress) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_HOME_PHONE = :employeeHomePhone'.
	 */
	public Employees[] findWhereEmployeeHomePhoneEquals(String employeeHomePhone) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_MOBILE = :employeeMobile'.
	 */
	public Employees[] findWhereEmployeeMobileEquals(String employeeMobile) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_EMRG_PHONE = :employeeEmrgPhone'.
	 */
	public Employees[] findWhereEmployeeEmrgPhoneEquals(String employeeEmrgPhone) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_EMAIL = :employeeEmail'.
	 */
	public Employees[] findWhereEmployeeEmailEquals(String employeeEmail) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_SMOKER = :employeeSmoker'.
	 */
	public Employees[] findWhereEmployeeSmokerEquals(int employeeSmoker) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_OFFER_DATE = :employeeOfferDate'.
	 */
	public Employees[] findWhereEmployeeOfferDateEquals(Date employeeOfferDate) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_JOIN_DATE = :employeeJoinDate'.
	 */
	public Employees[] findWhereEmployeeJoinDateEquals(Date employeeJoinDate) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_IMAGE = :employeeImage'.
	 */
	public Employees[] findWhereEmployeeImageEquals(byte[] employeeImage) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'COUNTRY_ID = :countryId'.
	 */
	public Employees[] findWhereCountryIdEquals(int countryId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CITY_ID = :cityId'.
	 */
	public Employees[] findWhereCityIdEquals(int cityId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'RELIGION_ID = :religionId'.
	 */
	public Employees[] findWhereReligionIdEquals(int religionId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MARITAL_STATUS_ID = :maritalStatusId'.
	 */
	public Employees[] findWhereMaritalStatusIdEquals(int maritalStatusId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MILITARY_STATUS_ID = :militaryStatusId'.
	 */
	public Employees[] findWhereMilitaryStatusIdEquals(int militaryStatusId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_JOB_ID = :empJobId'.
	 */
	public Employees[] findWhereEmpJobIdEquals(int empJobId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_TYPE_ID = :employeeTypeId'.
	 */
	public Employees[] findWhereEmployeeTypeIdEquals(int employeeTypeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CAR_LICENCE = :carLicence'.
	 */
	public Employees[] findWhereCarLicenceEquals(String carLicence) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CAR_LICENCE_TYPE_ID = :carLicenceTypeId'.
	 */
	public Employees[] findWhereCarLicenceTypeIdEquals(int carLicenceTypeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BLOOD_CATEGORY_ID = :bloodCategoryId'.
	 */
	public Employees[] findWhereBloodCategoryIdEquals(int bloodCategoryId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_STATUS_ID = :empStatusId'.
	 */
	public Employees[] findWhereEmpStatusIdEquals(int empStatusId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BUS_LINE_AREA_ID = :busLineAreaId'.
	 */
	public Employees[] findWhereBusLineAreaIdEquals(int busLineAreaId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'DRIVER_MODERATOR_LINE_ID = :driverModeratorLineId'.
	 */
	public Employees[] findWhereDriverModeratorLineIdEquals(int driverModeratorLineId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'HEALTH_CARE_ID = :healthCareId'.
	 */
	public Employees[] findWhereHealthCareIdEquals(int healthCareId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public Employees[] findWhereCandidateIdEquals(int candidateId) throws EmployeesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMPLOYEES table that match the specified arbitrary SQL statement
	 */
	public Employees[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the specified arbitrary SQL statement
	 */
	public Employees[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmployeesDaoException;
	
	
	
	
	/******
	By Yahia
	*****/
		/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Employees[] findByPassportDetails(int passportId) throws EmployeesDaoException;

	
		/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public Employees[] findByJobCandidates(int candidateId) throws EmployeesDaoException;

	

}
