/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EmpSickLeaveDao
{
	/** 
	 * Inserts a new row in the EMP_SICK_LEAVE table.
	 */
	public EmpSickLeavePk insert(EmpSickLeave dto) throws EmpSickLeaveDaoException;

	/** 
	 * Updates a single row in the EMP_SICK_LEAVE table.
	 */
	public void update(EmpSickLeavePk pk, EmpSickLeave dto) throws EmpSickLeaveDaoException;

	/** 
	 * Deletes a single row in the EMP_SICK_LEAVE table.
	 */
	public void delete(EmpSickLeavePk pk) throws EmpSickLeaveDaoException;

	/** 
	 * Returns the rows from the EMP_SICK_LEAVE table that matches the specified primary-key value.
	 */
	public EmpSickLeave findByPrimaryKey(EmpSickLeavePk pk) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'EMP_SICK_LEAVE_ID = :empSickLeaveId'.
	 */
	public EmpSickLeave findByPrimaryKey(int empSickLeaveId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria ''.
	 */
	public EmpSickLeave[] findAll() throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'DISEASE_ID = :diseaseId'.
	 */
	public EmpSickLeave[] findByDiseases(int diseaseId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmpSickLeave[] findByEmployees(int employeeId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'EMP_VACATION_ID = :empVacationId'.
	 */
	public EmpSickLeave[] findByEmpVacations(long empVacationId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'HOSPITAL_ID = :hospitalId'.
	 */
	public EmpSickLeave[] findByHospitals(int hospitalId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'EMP_SICK_LEAVE_ID = :empSickLeaveId'.
	 */
	public EmpSickLeave[] findWhereEmpSickLeaveIdEquals(int empSickLeaveId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmpSickLeave[] findWhereEmployeeIdEquals(int employeeId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'DISEASE_ID = :diseaseId'.
	 */
	public EmpSickLeave[] findWhereDiseaseIdEquals(int diseaseId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'HOSPITAL_ID = :hospitalId'.
	 */
	public EmpSickLeave[] findWhereHospitalIdEquals(int hospitalId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'EMP_VACATION_ID = :empVacationId'.
	 */
	public EmpSickLeave[] findWhereEmpVacationIdEquals(long empVacationId) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the criteria 'HOSPITAL_REPORT_IMAGE = :hospitalReportImage'.
	 */
	public EmpSickLeave[] findWhereHospitalReportImageEquals(byte[] hospitalReportImage) throws EmpSickLeaveDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the specified arbitrary SQL statement
	 */
	public EmpSickLeave[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpSickLeaveDaoException;

	/** 
	 * Returns all rows from the EMP_SICK_LEAVE table that match the specified arbitrary SQL statement
	 */
	public EmpSickLeave[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpSickLeaveDaoException;

}
