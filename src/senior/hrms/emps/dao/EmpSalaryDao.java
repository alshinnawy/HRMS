/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.math.BigDecimal;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface EmpSalaryDao
{
	/** 
	 * Inserts a new row in the EMP_SALARY table.
	 */
	public EmpSalaryPk insert(EmpSalary dto) throws EmpSalaryDaoException;

	/** 
	 * Updates a single row in the EMP_SALARY table.
	 */
	public void update(EmpSalaryPk pk, EmpSalary dto) throws EmpSalaryDaoException;

	/** 
	 * Deletes a single row in the EMP_SALARY table.
	 */
	public void delete(EmpSalaryPk pk) throws EmpSalaryDaoException;

	/** 
	 * Returns the rows from the EMP_SALARY table that matches the specified primary-key value.
	 */
	public EmpSalary findByPrimaryKey(EmpSalaryPk pk) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'EMP_JOB_ID = :empJobId'.
	 */
	public EmpSalary findByPrimaryKey(int empJobId) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria ''.
	 */
	public EmpSalary[] findAll() throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'EMP_JOB_ID = :empJobId'.
	 */
	public EmpSalary[] findByEmployeeJobs(int empJobId) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'FINANCIAL_YEAR_ID = :financialYearId'.
	 */
	public EmpSalary[] findByFinancialYears(int financialYearId) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'EMP_JOB_ID = :empJobId'.
	 */
	public EmpSalary[] findWhereEmpJobIdEquals(int empJobId) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'FINANCIAL_YEAR_ID = :financialYearId'.
	 */
	public EmpSalary[] findWhereFinancialYearIdEquals(int financialYearId) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'PRICE_PER_HOUR = :pricePerHour'.
	 */
	public EmpSalary[] findWherePricePerHourEquals(BigDecimal pricePerHour) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'BASIC_SALARY = :basicSalary'.
	 */
	public EmpSalary[] findWhereBasicSalaryEquals(BigDecimal basicSalary) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'PROFIT_SHARE = :profitShare'.
	 */
	public EmpSalary[] findWhereProfitShareEquals(BigDecimal profitShare) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'RAISE_RATIO = :raiseRatio'.
	 */
	public EmpSalary[] findWhereRaiseRatioEquals(BigDecimal raiseRatio) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the criteria 'TAX_RATIO = :taxRatio'.
	 */
	public EmpSalary[] findWhereTaxRatioEquals(BigDecimal taxRatio) throws EmpSalaryDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMP_SALARY table that match the specified arbitrary SQL statement
	 */
	public EmpSalary[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpSalaryDaoException;

	/** 
	 * Returns all rows from the EMP_SALARY table that match the specified arbitrary SQL statement
	 */
	public EmpSalary[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpSalaryDaoException;

}
