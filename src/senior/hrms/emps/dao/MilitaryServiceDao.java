/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.dao;

import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;

public interface MilitaryServiceDao
{
	/** 
	 * Inserts a new row in the MILITARY_SERVICE table.
	 */
	public MilitaryServicePk insert(MilitaryService dto) throws MilitaryServiceDaoException;

	/** 
	 * Updates a single row in the MILITARY_SERVICE table.
	 */
	public void update(MilitaryServicePk pk, MilitaryService dto) throws MilitaryServiceDaoException;

	/** 
	 * Deletes a single row in the MILITARY_SERVICE table.
	 */
	public void delete(MilitaryServicePk pk) throws MilitaryServiceDaoException;

	/** 
	 * Returns the rows from the MILITARY_SERVICE table that matches the specified primary-key value.
	 */
	public MilitaryService findByPrimaryKey(MilitaryServicePk pk) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'MILITARY_SERVICE_ID = :militaryServiceId'.
	 */
	public MilitaryService findByPrimaryKey(int militaryServiceId) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria ''.
	 */
	public MilitaryService[] findAll() throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public MilitaryService[] findByEmployees(int employeeId) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'MILITARY_SERVICE_ID = :militaryServiceId'.
	 */
	public MilitaryService[] findWhereMilitaryServiceIdEquals(int militaryServiceId) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public MilitaryService[] findWhereEmployeeIdEquals(int employeeId) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'DATE_FROM = :dateFrom'.
	 */
	public MilitaryService[] findWhereDateFromEquals(Date dateFrom) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'DATE_TO = :dateTo'.
	 */
	public MilitaryService[] findWhereDateToEquals(Date dateTo) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'RETURN_DATE = :returnDate'.
	 */
	public MilitaryService[] findWhereReturnDateEquals(Date returnDate) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the criteria 'MILITARY_REPORT_IMAGE = :militaryReportImage'.
	 */
	public MilitaryService[] findWhereMilitaryReportImageEquals(byte[] militaryReportImage) throws MilitaryServiceDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the specified arbitrary SQL statement
	 */
	public MilitaryService[] findByDynamicSelect(String sql, Object[] sqlParams) throws MilitaryServiceDaoException;

	/** 
	 * Returns all rows from the MILITARY_SERVICE table that match the specified arbitrary SQL statement
	 */
	public MilitaryService[] findByDynamicWhere(String sql, Object[] sqlParams) throws MilitaryServiceDaoException;

}
