/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.jdbc;

import senior.hrms.emps.dao.*;
import senior.hrms.emps.factory.*;
import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmpInjuryDaoImpl extends AbstractDAO implements EmpInjuryDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT EMP_INJURY_ID, EMPLOYEE_ID, HOSPITAL_ID, ORGAN_ID, ACCIDENT_REASON_ID, ACCIDENT_TYPE_ID, DATE_FROM, DATE_TO, HOSPITAL_REPORT, HOSPITAL_REPORT_IMAGE, INJURY_PARENT_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( EMP_INJURY_ID, EMPLOYEE_ID, HOSPITAL_ID, ORGAN_ID, ACCIDENT_REASON_ID, ACCIDENT_TYPE_ID, DATE_FROM, DATE_TO, HOSPITAL_REPORT, HOSPITAL_REPORT_IMAGE, INJURY_PARENT_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, EMPTY_CLOB(), EMPTY_BLOB(), ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET EMP_INJURY_ID = ?, EMPLOYEE_ID = ?, HOSPITAL_ID = ?, ORGAN_ID = ?, ACCIDENT_REASON_ID = ?, ACCIDENT_TYPE_ID = ?, DATE_FROM = ?, DATE_TO = ?, HOSPITAL_REPORT = EMPTY_CLOB(), HOSPITAL_REPORT_IMAGE = EMPTY_BLOB(), INJURY_PARENT_ID = ? WHERE EMP_INJURY_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE EMP_INJURY_ID = ?";

	/** 
	 * Index of column EMP_INJURY_ID
	 */
	protected static final int COLUMN_EMP_INJURY_ID = 1;

	/** 
	 * Index of column EMPLOYEE_ID
	 */
	protected static final int COLUMN_EMPLOYEE_ID = 2;

	/** 
	 * Index of column HOSPITAL_ID
	 */
	protected static final int COLUMN_HOSPITAL_ID = 3;

	/** 
	 * Index of column ORGAN_ID
	 */
	protected static final int COLUMN_ORGAN_ID = 4;

	/** 
	 * Index of column ACCIDENT_REASON_ID
	 */
	protected static final int COLUMN_ACCIDENT_REASON_ID = 5;

	/** 
	 * Index of column ACCIDENT_TYPE_ID
	 */
	protected static final int COLUMN_ACCIDENT_TYPE_ID = 6;

	/** 
	 * Index of column DATE_FROM
	 */
	protected static final int COLUMN_DATE_FROM = 7;

	/** 
	 * Index of column DATE_TO
	 */
	protected static final int COLUMN_DATE_TO = 8;

	/** 
	 * Index of column HOSPITAL_REPORT
	 */
	protected static final int COLUMN_HOSPITAL_REPORT = 9;

	/** 
	 * Index of column HOSPITAL_REPORT_IMAGE
	 */
	protected static final int COLUMN_HOSPITAL_REPORT_IMAGE = 10;

	/** 
	 * Index of column INJURY_PARENT_ID
	 */
	protected static final int COLUMN_INJURY_PARENT_ID = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column EMP_INJURY_ID
	 */
	protected static final int PK_COLUMN_EMP_INJURY_ID = 1;

	/** 
	 * Inserts a new row in the EMP_INJURY table.
	 */
	public EmpInjuryPk insert(EmpInjury dto) throws EmpInjuryDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getEmpInjuryId() );
			stmt.setInt( index++, dto.getEmployeeId() );
			if (dto.isHospitalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getHospitalId() );
			}
		
			stmt.setInt( index++, dto.getOrganId() );
			stmt.setInt( index++, dto.getAccidentReasonId() );
			stmt.setInt( index++, dto.getAccidentTypeId() );
			stmt.setTimestamp(index++, dto.getDateFrom()==null ? null : new java.sql.Timestamp( dto.getDateFrom().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateTo()==null ? null : new java.sql.Timestamp( dto.getDateTo().getTime() ) );
			// no need to bind value for LOB column
			// no need to bind value for LOB column
			stmt.setInt( index++, dto.getInjuryParentId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
		
			// Update CLOB columns
			boolean oldAutoCommitValue = conn.getAutoCommit();
			conn.setAutoCommit(false);
			String lobSQL = "SELECT HOSPITAL_REPORT, HOSPITAL_REPORT_IMAGE FROM " + getTableName() + " WHERE EMP_INJURY_ID=? FOR UPDATE";
			index = 1;
			System.out.println( lobSQL );
			PreparedStatement lobStmt = conn.prepareStatement( lobSQL );
			lobStmt.setInt( index++, dto.getEmpInjuryId() );
			ResultSet lobRs = lobStmt.executeQuery();
			int lobIndex = 1;
			if (lobRs.next()) {
				super.updateClob( lobRs.getClob(lobIndex++), dto.getHospitalReport());
				super.updateBlob( lobRs.getBlob(lobIndex++), dto.getHospitalReportImage());
			}
		
			conn.commit();
			conn.setAutoCommit(oldAutoCommitValue);
			System.out.println( "Updated LOB" );
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpInjuryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the EMP_INJURY table.
	 */
	public void update(EmpInjuryPk pk, EmpInjury dto) throws EmpInjuryDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getEmpInjuryId() );
			stmt.setInt( index++, dto.getEmployeeId() );
			if (dto.isHospitalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getHospitalId() );
			}
		
			stmt.setInt( index++, dto.getOrganId() );
			stmt.setInt( index++, dto.getAccidentReasonId() );
			stmt.setInt( index++, dto.getAccidentTypeId() );
			stmt.setTimestamp(index++, dto.getDateFrom()==null ? null : new java.sql.Timestamp( dto.getDateFrom().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateTo()==null ? null : new java.sql.Timestamp( dto.getDateTo().getTime() ) );
			// no need to bind value for LOB column
			// no need to bind value for LOB column
			stmt.setInt( index++, dto.getInjuryParentId() );
			stmt.setInt( 10, pk.getEmpInjuryId() );
			int rows = stmt.executeUpdate();
		
			// Update CLOB columns
			boolean oldAutoCommitValue = conn.getAutoCommit();
			conn.setAutoCommit(false);
			String lobSQL = "SELECT HOSPITAL_REPORT, HOSPITAL_REPORT_IMAGE FROM " + getTableName() + " WHERE EMP_INJURY_ID=? FOR UPDATE";
			index = 1;
			System.out.println( lobSQL );
			PreparedStatement lobStmt = conn.prepareStatement( lobSQL );
			lobStmt.setInt( index++, dto.getEmpInjuryId() );
			ResultSet lobRs = lobStmt.executeQuery();
			int lobIndex = 1;
			if (lobRs.next()) {
				super.updateClob( lobRs.getClob(lobIndex++), dto.getHospitalReport());
				super.updateBlob( lobRs.getBlob(lobIndex++), dto.getHospitalReportImage());
			}
		
			conn.commit();
			conn.setAutoCommit(oldAutoCommitValue);
			System.out.println( "Updated LOB" );
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpInjuryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the EMP_INJURY table.
	 */
	public void delete(EmpInjuryPk pk) throws EmpInjuryDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getEmpInjuryId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpInjuryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the EMP_INJURY table that matches the specified primary-key value.
	 */
	public EmpInjury findByPrimaryKey(EmpInjuryPk pk) throws EmpInjuryDaoException
	{
		return findByPrimaryKey( pk.getEmpInjuryId() );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'EMP_INJURY_ID = :empInjuryId'.
	 */
	public EmpInjury findByPrimaryKey(int empInjuryId) throws EmpInjuryDaoException
	{
		EmpInjury ret[] = findByDynamicSelect( SQL_SELECT + " WHERE EMP_INJURY_ID = ?", new Object[] {  new Integer(empInjuryId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria ''.
	 */
	public EmpInjury[] findAll() throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY EMP_INJURY_ID", null );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'ACCIDENT_REASON_ID = :accidentReasonId'.
	 */
	public EmpInjury[] findByAccidentReasons(int accidentReasonId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCIDENT_REASON_ID = ?", new Object[] {  new Integer(accidentReasonId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'ACCIDENT_TYPE_ID = :accidentTypeId'.
	 */
	public EmpInjury[] findByAccidentTypes(int accidentTypeId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCIDENT_TYPE_ID = ?", new Object[] {  new Integer(accidentTypeId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmpInjury[] findByEmployees(int employeeId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ID = ?", new Object[] {  new Integer(employeeId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'INJURY_PARENT_ID = :injuryParentId'.
	 */
	public EmpInjury[] findByEmpInjury(int injuryParentId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INJURY_PARENT_ID = ?", new Object[] {  new Integer(injuryParentId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'HOSPITAL_ID = :hospitalId'.
	 */
	public EmpInjury[] findByHospitals(int hospitalId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HOSPITAL_ID = ?", new Object[] {  new Integer(hospitalId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'ORGAN_ID = :organId'.
	 */
	public EmpInjury[] findByOrgan(int organId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORGAN_ID = ?", new Object[] {  new Integer(organId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'EMP_INJURY_ID = :empInjuryId'.
	 */
	public EmpInjury[] findWhereEmpInjuryIdEquals(int empInjuryId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_INJURY_ID = ? ORDER BY EMP_INJURY_ID", new Object[] {  new Integer(empInjuryId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmpInjury[] findWhereEmployeeIdEquals(int employeeId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ID = ? ORDER BY EMPLOYEE_ID", new Object[] {  new Integer(employeeId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'HOSPITAL_ID = :hospitalId'.
	 */
	public EmpInjury[] findWhereHospitalIdEquals(int hospitalId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HOSPITAL_ID = ? ORDER BY HOSPITAL_ID", new Object[] {  new Integer(hospitalId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'ORGAN_ID = :organId'.
	 */
	public EmpInjury[] findWhereOrganIdEquals(int organId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORGAN_ID = ? ORDER BY ORGAN_ID", new Object[] {  new Integer(organId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'ACCIDENT_REASON_ID = :accidentReasonId'.
	 */
	public EmpInjury[] findWhereAccidentReasonIdEquals(int accidentReasonId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCIDENT_REASON_ID = ? ORDER BY ACCIDENT_REASON_ID", new Object[] {  new Integer(accidentReasonId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'ACCIDENT_TYPE_ID = :accidentTypeId'.
	 */
	public EmpInjury[] findWhereAccidentTypeIdEquals(int accidentTypeId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCIDENT_TYPE_ID = ? ORDER BY ACCIDENT_TYPE_ID", new Object[] {  new Integer(accidentTypeId) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'DATE_FROM = :dateFrom'.
	 */
	public EmpInjury[] findWhereDateFromEquals(Date dateFrom) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_FROM = ? ORDER BY DATE_FROM", new Object[] { dateFrom==null ? null : new java.sql.Timestamp( dateFrom.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'DATE_TO = :dateTo'.
	 */
	public EmpInjury[] findWhereDateToEquals(Date dateTo) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_TO = ? ORDER BY DATE_TO", new Object[] { dateTo==null ? null : new java.sql.Timestamp( dateTo.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'HOSPITAL_REPORT = :hospitalReport'.
	 */
	public EmpInjury[] findWhereHospitalReportEquals(String hospitalReport) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HOSPITAL_REPORT = ? ORDER BY HOSPITAL_REPORT", new Object[] { hospitalReport } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'HOSPITAL_REPORT_IMAGE = :hospitalReportImage'.
	 */
	public EmpInjury[] findWhereHospitalReportImageEquals(byte[] hospitalReportImage) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HOSPITAL_REPORT_IMAGE = ? ORDER BY HOSPITAL_REPORT_IMAGE", new Object[] { hospitalReportImage } );
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the criteria 'INJURY_PARENT_ID = :injuryParentId'.
	 */
	public EmpInjury[] findWhereInjuryParentIdEquals(int injuryParentId) throws EmpInjuryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INJURY_PARENT_ID = ? ORDER BY INJURY_PARENT_ID", new Object[] {  new Integer(injuryParentId) } );
	}

	/**
	 * Method 'EmpInjuryDaoImpl'
	 * 
	 */
	public EmpInjuryDaoImpl()
	{
	}

	/**
	 * Method 'EmpInjuryDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmpInjuryDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "HRMS.EMP_INJURY";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmpInjury fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmpInjury dto = new EmpInjury();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmpInjury[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmpInjury dto = new EmpInjury();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmpInjury ret[] = new EmpInjury[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmpInjury dto, ResultSet rs) throws SQLException
	{
		dto.setEmpInjuryId( rs.getInt( COLUMN_EMP_INJURY_ID ) );
		dto.setEmployeeId( rs.getInt( COLUMN_EMPLOYEE_ID ) );
		dto.setHospitalId( rs.getInt( COLUMN_HOSPITAL_ID ) );
		if (rs.wasNull()) {
			dto.setHospitalIdNull( true );
		}
		
		dto.setOrganId( rs.getInt( COLUMN_ORGAN_ID ) );
		dto.setAccidentReasonId( rs.getInt( COLUMN_ACCIDENT_REASON_ID ) );
		dto.setAccidentTypeId( rs.getInt( COLUMN_ACCIDENT_TYPE_ID ) );
		dto.setDateFrom( rs.getTimestamp(COLUMN_DATE_FROM ) );
		dto.setDateTo( rs.getTimestamp(COLUMN_DATE_TO ) );
		dto.setHospitalReport( super.getClobColumn(rs, COLUMN_HOSPITAL_REPORT ) );
		dto.setHospitalReportImage( super.getBlobColumn(rs, COLUMN_HOSPITAL_REPORT_IMAGE ) );
		dto.setInjuryParentId( rs.getInt( COLUMN_INJURY_PARENT_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmpInjury dto)
	{
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the specified arbitrary SQL statement
	 */
	public EmpInjury[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpInjuryDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpInjuryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the EMP_INJURY table that match the specified arbitrary SQL statement
	 */
	public EmpInjury[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpInjuryDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpInjuryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
