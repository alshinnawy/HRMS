/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.jdbc;

import senior.hrms.emps.dao.*;
import senior.hrms.emps.factory.*;
import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmployeesDaoImpl extends AbstractDAO implements EmployeesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT EMPLOYEE_ID, EMPLOYEE_CODE, EMPLOYEE_FIRST_NAME, EMPLOYEE_MID_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_FAMILY_NAME, EMPLOYEE_BIRTH_DATE, EMPLOYEE_NID, EMP_NID_ADDRESS, PASSPORT_ID, GENDER, EMPLOYEE_ADDRESS, EMPLOYEE_HOME_PHONE, EMPLOYEE_MOBILE, EMPLOYEE_EMRG_PHONE, EMPLOYEE_EMAIL, EMPLOYEE_SMOKER, EMPLOYEE_OFFER_DATE, EMPLOYEE_JOIN_DATE, EMPLOYEE_IMAGE, COUNTRY_ID, CITY_ID, RELIGION_ID, MARITAL_STATUS_ID, MILITARY_STATUS_ID, EMP_JOB_ID, EMPLOYEE_TYPE_ID, CAR_LICENCE, CAR_LICENCE_TYPE_ID, BLOOD_CATEGORY_ID, EMP_STATUS_ID, BUS_LINE_AREA_ID, DRIVER_MODERATOR_LINE_ID, HEALTH_CARE_ID, CANDIDATE_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( EMPLOYEE_ID, EMPLOYEE_CODE, EMPLOYEE_FIRST_NAME, EMPLOYEE_MID_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_FAMILY_NAME, EMPLOYEE_BIRTH_DATE, EMPLOYEE_NID, EMP_NID_ADDRESS, PASSPORT_ID, GENDER, EMPLOYEE_ADDRESS, EMPLOYEE_HOME_PHONE, EMPLOYEE_MOBILE, EMPLOYEE_EMRG_PHONE, EMPLOYEE_EMAIL, EMPLOYEE_SMOKER, EMPLOYEE_OFFER_DATE, EMPLOYEE_JOIN_DATE, EMPLOYEE_IMAGE, COUNTRY_ID, CITY_ID, RELIGION_ID, MARITAL_STATUS_ID, MILITARY_STATUS_ID, EMP_JOB_ID, EMPLOYEE_TYPE_ID, CAR_LICENCE, CAR_LICENCE_TYPE_ID, BLOOD_CATEGORY_ID, EMP_STATUS_ID, BUS_LINE_AREA_ID, DRIVER_MODERATOR_LINE_ID, HEALTH_CARE_ID, CANDIDATE_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, EMPTY_BLOB(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET EMPLOYEE_ID = ?, EMPLOYEE_CODE = ?, EMPLOYEE_FIRST_NAME = ?, EMPLOYEE_MID_NAME = ?, EMPLOYEE_LAST_NAME = ?, EMPLOYEE_FAMILY_NAME = ?, EMPLOYEE_BIRTH_DATE = ?, EMPLOYEE_NID = ?, EMP_NID_ADDRESS = ?, PASSPORT_ID = ?, GENDER = ?, EMPLOYEE_ADDRESS = ?, EMPLOYEE_HOME_PHONE = ?, EMPLOYEE_MOBILE = ?, EMPLOYEE_EMRG_PHONE = ?, EMPLOYEE_EMAIL = ?, EMPLOYEE_SMOKER = ?, EMPLOYEE_OFFER_DATE = ?, EMPLOYEE_JOIN_DATE = ?, EMPLOYEE_IMAGE = EMPTY_BLOB(), COUNTRY_ID = ?, CITY_ID = ?, RELIGION_ID = ?, MARITAL_STATUS_ID = ?, MILITARY_STATUS_ID = ?, EMP_JOB_ID = ?, EMPLOYEE_TYPE_ID = ?, CAR_LICENCE = ?, CAR_LICENCE_TYPE_ID = ?, BLOOD_CATEGORY_ID = ?, EMP_STATUS_ID = ?, BUS_LINE_AREA_ID = ?, DRIVER_MODERATOR_LINE_ID = ?, HEALTH_CARE_ID = ?, CANDIDATE_ID = ? WHERE EMPLOYEE_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE EMPLOYEE_ID = ?";

	/** 
	 * Index of column EMPLOYEE_ID
	 */
	protected static final int COLUMN_EMPLOYEE_ID = 1;

	/** 
	 * Index of column EMPLOYEE_CODE
	 */
	protected static final int COLUMN_EMPLOYEE_CODE = 2;

	/** 
	 * Index of column EMPLOYEE_FIRST_NAME
	 */
	protected static final int COLUMN_EMPLOYEE_FIRST_NAME = 3;

	/** 
	 * Index of column EMPLOYEE_MID_NAME
	 */
	protected static final int COLUMN_EMPLOYEE_MID_NAME = 4;

	/** 
	 * Index of column EMPLOYEE_LAST_NAME
	 */
	protected static final int COLUMN_EMPLOYEE_LAST_NAME = 5;

	/** 
	 * Index of column EMPLOYEE_FAMILY_NAME
	 */
	protected static final int COLUMN_EMPLOYEE_FAMILY_NAME = 6;

	/** 
	 * Index of column EMPLOYEE_BIRTH_DATE
	 */
	protected static final int COLUMN_EMPLOYEE_BIRTH_DATE = 7;

	/** 
	 * Index of column EMPLOYEE_NID
	 */
	protected static final int COLUMN_EMPLOYEE_NID = 8;

	/** 
	 * Index of column EMP_NID_ADDRESS
	 */
	protected static final int COLUMN_EMP_NID_ADDRESS = 9;

	/** 
	 * Index of column PASSPORT_ID
	 */
	protected static final int COLUMN_PASSPORT_ID = 10;

	/** 
	 * Index of column GENDER
	 */
	protected static final int COLUMN_GENDER = 11;

	/** 
	 * Index of column EMPLOYEE_ADDRESS
	 */
	protected static final int COLUMN_EMPLOYEE_ADDRESS = 12;

	/** 
	 * Index of column EMPLOYEE_HOME_PHONE
	 */
	protected static final int COLUMN_EMPLOYEE_HOME_PHONE = 13;

	/** 
	 * Index of column EMPLOYEE_MOBILE
	 */
	protected static final int COLUMN_EMPLOYEE_MOBILE = 14;

	/** 
	 * Index of column EMPLOYEE_EMRG_PHONE
	 */
	protected static final int COLUMN_EMPLOYEE_EMRG_PHONE = 15;

	/** 
	 * Index of column EMPLOYEE_EMAIL
	 */
	protected static final int COLUMN_EMPLOYEE_EMAIL = 16;

	/** 
	 * Index of column EMPLOYEE_SMOKER
	 */
	protected static final int COLUMN_EMPLOYEE_SMOKER = 17;

	/** 
	 * Index of column EMPLOYEE_OFFER_DATE
	 */
	protected static final int COLUMN_EMPLOYEE_OFFER_DATE = 18;

	/** 
	 * Index of column EMPLOYEE_JOIN_DATE
	 */
	protected static final int COLUMN_EMPLOYEE_JOIN_DATE = 19;

	/** 
	 * Index of column EMPLOYEE_IMAGE
	 */
	protected static final int COLUMN_EMPLOYEE_IMAGE = 20;

	/** 
	 * Index of column COUNTRY_ID
	 */
	protected static final int COLUMN_COUNTRY_ID = 21;

	/** 
	 * Index of column CITY_ID
	 */
	protected static final int COLUMN_CITY_ID = 22;

	/** 
	 * Index of column RELIGION_ID
	 */
	protected static final int COLUMN_RELIGION_ID = 23;

	/** 
	 * Index of column MARITAL_STATUS_ID
	 */
	protected static final int COLUMN_MARITAL_STATUS_ID = 24;

	/** 
	 * Index of column MILITARY_STATUS_ID
	 */
	protected static final int COLUMN_MILITARY_STATUS_ID = 25;

	/** 
	 * Index of column EMP_JOB_ID
	 */
	protected static final int COLUMN_EMP_JOB_ID = 26;

	/** 
	 * Index of column EMPLOYEE_TYPE_ID
	 */
	protected static final int COLUMN_EMPLOYEE_TYPE_ID = 27;

	/** 
	 * Index of column CAR_LICENCE
	 */
	protected static final int COLUMN_CAR_LICENCE = 28;

	/** 
	 * Index of column CAR_LICENCE_TYPE_ID
	 */
	protected static final int COLUMN_CAR_LICENCE_TYPE_ID = 29;

	/** 
	 * Index of column BLOOD_CATEGORY_ID
	 */
	protected static final int COLUMN_BLOOD_CATEGORY_ID = 30;

	/** 
	 * Index of column EMP_STATUS_ID
	 */
	protected static final int COLUMN_EMP_STATUS_ID = 31;

	/** 
	 * Index of column BUS_LINE_AREA_ID
	 */
	protected static final int COLUMN_BUS_LINE_AREA_ID = 32;

	/** 
	 * Index of column DRIVER_MODERATOR_LINE_ID
	 */
	protected static final int COLUMN_DRIVER_MODERATOR_LINE_ID = 33;

	/** 
	 * Index of column HEALTH_CARE_ID
	 */
	protected static final int COLUMN_HEALTH_CARE_ID = 34;

	/** 
	 * Index of column CANDIDATE_ID
	 */
	protected static final int COLUMN_CANDIDATE_ID = 35;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 35;

	/** 
	 * Index of primary-key column EMPLOYEE_ID
	 */
	protected static final int PK_COLUMN_EMPLOYEE_ID = 1;

	/** 
	 * Inserts a new row in the EMPLOYEES table.
	 */
	public EmployeesPk insert(Employees dto) throws EmployeesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getEmployeeId() );
			stmt.setString( index++, dto.getEmployeeCode() );
			stmt.setString( index++, dto.getEmployeeFirstName() );
			stmt.setString( index++, dto.getEmployeeMidName() );
			stmt.setString( index++, dto.getEmployeeLastName() );
			stmt.setString( index++, dto.getEmployeeFamilyName() );
			stmt.setTimestamp(index++, dto.getEmployeeBirthDate()==null ? null : new java.sql.Timestamp( dto.getEmployeeBirthDate().getTime() ) );
			stmt.setString( index++, dto.getEmployeeNid() );
			stmt.setString( index++, dto.getEmpNidAddress() );
			if (dto.isPassportIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPassportId() );
			}
		
			stmt.setString( index++, dto.getGender() );
			stmt.setString( index++, dto.getEmployeeAddress() );
			stmt.setString( index++, dto.getEmployeeHomePhone() );
			stmt.setString( index++, dto.getEmployeeMobile() );
			stmt.setString( index++, dto.getEmployeeEmrgPhone() );
			stmt.setString( index++, dto.getEmployeeEmail() );
			if (dto.isEmployeeSmokerNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmployeeSmoker() );
			}
		
			stmt.setTimestamp(index++, dto.getEmployeeOfferDate()==null ? null : new java.sql.Timestamp( dto.getEmployeeOfferDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getEmployeeJoinDate()==null ? null : new java.sql.Timestamp( dto.getEmployeeJoinDate().getTime() ) );
			// no need to bind value for LOB column
			stmt.setInt( index++, dto.getCountryId() );
			stmt.setInt( index++, dto.getCityId() );
			stmt.setInt( index++, dto.getReligionId() );
			stmt.setInt( index++, dto.getMaritalStatusId() );
			stmt.setInt( index++, dto.getMilitaryStatusId() );
			stmt.setInt( index++, dto.getEmpJobId() );
			stmt.setInt( index++, dto.getEmployeeTypeId() );
			stmt.setString( index++, dto.getCarLicence() );
			if (dto.isCarLicenceTypeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCarLicenceTypeId() );
			}
		
			stmt.setInt( index++, dto.getBloodCategoryId() );
			stmt.setInt( index++, dto.getEmpStatusId() );
			if (dto.isBusLineAreaIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBusLineAreaId() );
			}
		
			if (dto.isDriverModeratorLineIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getDriverModeratorLineId() );
			}
		
			if (dto.isHealthCareIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getHealthCareId() );
			}
		
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the EMPLOYEES table.
	 */
	public void update(EmployeesPk pk, Employees dto) throws EmployeesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getEmployeeId() );
			stmt.setString( index++, dto.getEmployeeCode() );
			stmt.setString( index++, dto.getEmployeeFirstName() );
			stmt.setString( index++, dto.getEmployeeMidName() );
			stmt.setString( index++, dto.getEmployeeLastName() );
			stmt.setString( index++, dto.getEmployeeFamilyName() );
			stmt.setTimestamp(index++, dto.getEmployeeBirthDate()==null ? null : new java.sql.Timestamp( dto.getEmployeeBirthDate().getTime() ) );
			stmt.setString( index++, dto.getEmployeeNid() );
			stmt.setString( index++, dto.getEmpNidAddress() );
			if (dto.isPassportIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPassportId() );
			}
		
			stmt.setString( index++, dto.getGender() );
			stmt.setString( index++, dto.getEmployeeAddress() );
			stmt.setString( index++, dto.getEmployeeHomePhone() );
			stmt.setString( index++, dto.getEmployeeMobile() );
			stmt.setString( index++, dto.getEmployeeEmrgPhone() );
			stmt.setString( index++, dto.getEmployeeEmail() );
			if (dto.isEmployeeSmokerNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmployeeSmoker() );
			}
		
			stmt.setTimestamp(index++, dto.getEmployeeOfferDate()==null ? null : new java.sql.Timestamp( dto.getEmployeeOfferDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getEmployeeJoinDate()==null ? null : new java.sql.Timestamp( dto.getEmployeeJoinDate().getTime() ) );
			// no need to bind value for LOB column
			stmt.setInt( index++, dto.getCountryId() );
			stmt.setInt( index++, dto.getCityId() );
			stmt.setInt( index++, dto.getReligionId() );
			stmt.setInt( index++, dto.getMaritalStatusId() );
			stmt.setInt( index++, dto.getMilitaryStatusId() );
			stmt.setInt( index++, dto.getEmpJobId() );
			stmt.setInt( index++, dto.getEmployeeTypeId() );
			stmt.setString( index++, dto.getCarLicence() );
			if (dto.isCarLicenceTypeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCarLicenceTypeId() );
			}
		
			stmt.setInt( index++, dto.getBloodCategoryId() );
			stmt.setInt( index++, dto.getEmpStatusId() );
			if (dto.isBusLineAreaIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBusLineAreaId() );
			}
		
			if (dto.isDriverModeratorLineIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getDriverModeratorLineId() );
			}
		
			if (dto.isHealthCareIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getHealthCareId() );
			}
		
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			stmt.setInt( 35, pk.getEmployeeId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the EMPLOYEES table.
	 */
	public void delete(EmployeesPk pk) throws EmployeesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getEmployeeId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the EMPLOYEES table that matches the specified primary-key value.
	 */
	public Employees findByPrimaryKey(EmployeesPk pk) throws EmployeesDaoException
	{
		return findByPrimaryKey( pk.getEmployeeId() );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public Employees findByPrimaryKey(int employeeId) throws EmployeesDaoException
	{
		Employees ret[] = findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ID = ?", new Object[] {  new Integer(employeeId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria ''.
	 */
	public Employees[] findAll() throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY EMPLOYEE_ID", null );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BLOOD_CATEGORY_ID = :bloodCategoryId'.
	 */
	public Employees[] findByBloodCategories(int bloodCategoryId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BLOOD_CATEGORY_ID = ?", new Object[] {  new Integer(bloodCategoryId) } );
	}

	
	
	
	
	
	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Employees[] findByPassportDetails(int passportId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSPORT_ID = ?", new Object[] {  new Integer(passportId) } );
	}




/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public Employees[] findByJobCandidates(int candidateId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANDIDATE_ID = ?", new Object[] {  new Integer(candidateId) } );
	}


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BUS_LINE_AREA_ID = :busLineAreaId'.
	 */
	public Employees[] findByBusLineAreas(int busLineAreaId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BUS_LINE_AREA_ID = ?", new Object[] {  new Integer(busLineAreaId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CAR_LICENCE_TYPE_ID = :carLicenceTypeId'.
	 */
	public Employees[] findByCarLicenceType(int carLicenceTypeId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAR_LICENCE_TYPE_ID = ?", new Object[] {  new Integer(carLicenceTypeId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CITY_ID = :cityId'.
	 */
	public Employees[] findByCities(int cityId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CITY_ID = ?", new Object[] {  new Integer(cityId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'COUNTRY_ID = :countryId'.
	 */
	public Employees[] findByCountries(int countryId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COUNTRY_ID = ?", new Object[] {  new Integer(countryId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'DRIVER_MODERATOR_LINE_ID = :driverModeratorLineId'.
	 */
	public Employees[] findByDriversModeratorsLines(int driverModeratorLineId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DRIVER_MODERATOR_LINE_ID = ?", new Object[] {  new Integer(driverModeratorLineId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'HEALTH_CARE_ID = :healthCareId'.
	 */
	public Employees[] findByEmpHealthCare(int healthCareId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HEALTH_CARE_ID = ?", new Object[] {  new Integer(healthCareId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_STATUS_ID = :empStatusId'.
	 */
	public Employees[] findByEmpStatus(int empStatusId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_STATUS_ID = ?", new Object[] {  new Integer(empStatusId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MARITAL_STATUS_ID = :maritalStatusId'.
	 */
	public Employees[] findByMaritalStatus(int maritalStatusId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MARITAL_STATUS_ID = ?", new Object[] {  new Integer(maritalStatusId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MILITARY_STATUS_ID = :militaryStatusId'.
	 */
	public Employees[] findByMilitaryStatus(int militaryStatusId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MILITARY_STATUS_ID = ?", new Object[] {  new Integer(militaryStatusId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'RELIGION_ID = :religionId'.
	 */
	public Employees[] findByReligion(int religionId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RELIGION_ID = ?", new Object[] {  new Integer(religionId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public Employees[] findWhereEmployeeIdEquals(int employeeId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ID = ? ORDER BY EMPLOYEE_ID", new Object[] {  new Integer(employeeId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_CODE = :employeeCode'.
	 */
	public Employees[] findWhereEmployeeCodeEquals(String employeeCode) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_CODE = ? ORDER BY EMPLOYEE_CODE", new Object[] { employeeCode } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_FIRST_NAME = :employeeFirstName'.
	 */
	public Employees[] findWhereEmployeeFirstNameEquals(String employeeFirstName) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_FIRST_NAME = ? ORDER BY EMPLOYEE_FIRST_NAME", new Object[] { employeeFirstName } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_MID_NAME = :employeeMidName'.
	 */
	public Employees[] findWhereEmployeeMidNameEquals(String employeeMidName) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_MID_NAME = ? ORDER BY EMPLOYEE_MID_NAME", new Object[] { employeeMidName } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_LAST_NAME = :employeeLastName'.
	 */
	public Employees[] findWhereEmployeeLastNameEquals(String employeeLastName) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_LAST_NAME = ? ORDER BY EMPLOYEE_LAST_NAME", new Object[] { employeeLastName } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_FAMILY_NAME = :employeeFamilyName'.
	 */
	public Employees[] findWhereEmployeeFamilyNameEquals(String employeeFamilyName) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_FAMILY_NAME = ? ORDER BY EMPLOYEE_FAMILY_NAME", new Object[] { employeeFamilyName } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_BIRTH_DATE = :employeeBirthDate'.
	 */
	public Employees[] findWhereEmployeeBirthDateEquals(Date employeeBirthDate) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_BIRTH_DATE = ? ORDER BY EMPLOYEE_BIRTH_DATE", new Object[] { employeeBirthDate==null ? null : new java.sql.Timestamp( employeeBirthDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_NID = :employeeNid'.
	 */
	public Employees[] findWhereEmployeeNidEquals(String employeeNid) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_NID = ? ORDER BY EMPLOYEE_NID", new Object[] { employeeNid } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_NID_ADDRESS = :empNidAddress'.
	 */
	public Employees[] findWhereEmpNidAddressEquals(String empNidAddress) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_NID_ADDRESS = ? ORDER BY EMP_NID_ADDRESS", new Object[] { empNidAddress } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Employees[] findWherePassportIdEquals(int passportId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSPORT_ID = ? ORDER BY PASSPORT_ID", new Object[] {  new Integer(passportId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'GENDER = :gender'.
	 */
	public Employees[] findWhereGenderEquals(String gender) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GENDER = ? ORDER BY GENDER", new Object[] { gender } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ADDRESS = :employeeAddress'.
	 */
	public Employees[] findWhereEmployeeAddressEquals(String employeeAddress) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ADDRESS = ? ORDER BY EMPLOYEE_ADDRESS", new Object[] { employeeAddress } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_HOME_PHONE = :employeeHomePhone'.
	 */
	public Employees[] findWhereEmployeeHomePhoneEquals(String employeeHomePhone) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_HOME_PHONE = ? ORDER BY EMPLOYEE_HOME_PHONE", new Object[] { employeeHomePhone } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_MOBILE = :employeeMobile'.
	 */
	public Employees[] findWhereEmployeeMobileEquals(String employeeMobile) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_MOBILE = ? ORDER BY EMPLOYEE_MOBILE", new Object[] { employeeMobile } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_EMRG_PHONE = :employeeEmrgPhone'.
	 */
	public Employees[] findWhereEmployeeEmrgPhoneEquals(String employeeEmrgPhone) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_EMRG_PHONE = ? ORDER BY EMPLOYEE_EMRG_PHONE", new Object[] { employeeEmrgPhone } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_EMAIL = :employeeEmail'.
	 */
	public Employees[] findWhereEmployeeEmailEquals(String employeeEmail) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_EMAIL = ? ORDER BY EMPLOYEE_EMAIL", new Object[] { employeeEmail } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_SMOKER = :employeeSmoker'.
	 */
	public Employees[] findWhereEmployeeSmokerEquals(int employeeSmoker) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_SMOKER = ? ORDER BY EMPLOYEE_SMOKER", new Object[] {  new Integer(employeeSmoker) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_OFFER_DATE = :employeeOfferDate'.
	 */
	public Employees[] findWhereEmployeeOfferDateEquals(Date employeeOfferDate) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_OFFER_DATE = ? ORDER BY EMPLOYEE_OFFER_DATE", new Object[] { employeeOfferDate==null ? null : new java.sql.Timestamp( employeeOfferDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_JOIN_DATE = :employeeJoinDate'.
	 */
	public Employees[] findWhereEmployeeJoinDateEquals(Date employeeJoinDate) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_JOIN_DATE = ? ORDER BY EMPLOYEE_JOIN_DATE", new Object[] { employeeJoinDate==null ? null : new java.sql.Timestamp( employeeJoinDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_IMAGE = :employeeImage'.
	 */
	public Employees[] findWhereEmployeeImageEquals(byte[] employeeImage) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_IMAGE = ? ORDER BY EMPLOYEE_IMAGE", new Object[] { employeeImage } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'COUNTRY_ID = :countryId'.
	 */
	public Employees[] findWhereCountryIdEquals(int countryId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COUNTRY_ID = ? ORDER BY COUNTRY_ID", new Object[] {  new Integer(countryId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CITY_ID = :cityId'.
	 */
	public Employees[] findWhereCityIdEquals(int cityId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CITY_ID = ? ORDER BY CITY_ID", new Object[] {  new Integer(cityId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'RELIGION_ID = :religionId'.
	 */
	public Employees[] findWhereReligionIdEquals(int religionId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RELIGION_ID = ? ORDER BY RELIGION_ID", new Object[] {  new Integer(religionId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MARITAL_STATUS_ID = :maritalStatusId'.
	 */
	public Employees[] findWhereMaritalStatusIdEquals(int maritalStatusId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MARITAL_STATUS_ID = ? ORDER BY MARITAL_STATUS_ID", new Object[] {  new Integer(maritalStatusId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MILITARY_STATUS_ID = :militaryStatusId'.
	 */
	public Employees[] findWhereMilitaryStatusIdEquals(int militaryStatusId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MILITARY_STATUS_ID = ? ORDER BY MILITARY_STATUS_ID", new Object[] {  new Integer(militaryStatusId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_JOB_ID = :empJobId'.
	 */
	public Employees[] findWhereEmpJobIdEquals(int empJobId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_JOB_ID = ? ORDER BY EMP_JOB_ID", new Object[] {  new Integer(empJobId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_TYPE_ID = :employeeTypeId'.
	 */
	public Employees[] findWhereEmployeeTypeIdEquals(int employeeTypeId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_TYPE_ID = ? ORDER BY EMPLOYEE_TYPE_ID", new Object[] {  new Integer(employeeTypeId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CAR_LICENCE = :carLicence'.
	 */
	public Employees[] findWhereCarLicenceEquals(String carLicence) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAR_LICENCE = ? ORDER BY CAR_LICENCE", new Object[] { carLicence } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CAR_LICENCE_TYPE_ID = :carLicenceTypeId'.
	 */
	public Employees[] findWhereCarLicenceTypeIdEquals(int carLicenceTypeId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAR_LICENCE_TYPE_ID = ? ORDER BY CAR_LICENCE_TYPE_ID", new Object[] {  new Integer(carLicenceTypeId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BLOOD_CATEGORY_ID = :bloodCategoryId'.
	 */
	public Employees[] findWhereBloodCategoryIdEquals(int bloodCategoryId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BLOOD_CATEGORY_ID = ? ORDER BY BLOOD_CATEGORY_ID", new Object[] {  new Integer(bloodCategoryId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMP_STATUS_ID = :empStatusId'.
	 */
	public Employees[] findWhereEmpStatusIdEquals(int empStatusId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_STATUS_ID = ? ORDER BY EMP_STATUS_ID", new Object[] {  new Integer(empStatusId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'BUS_LINE_AREA_ID = :busLineAreaId'.
	 */
	public Employees[] findWhereBusLineAreaIdEquals(int busLineAreaId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BUS_LINE_AREA_ID = ? ORDER BY BUS_LINE_AREA_ID", new Object[] {  new Integer(busLineAreaId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'DRIVER_MODERATOR_LINE_ID = :driverModeratorLineId'.
	 */
	public Employees[] findWhereDriverModeratorLineIdEquals(int driverModeratorLineId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DRIVER_MODERATOR_LINE_ID = ? ORDER BY DRIVER_MODERATOR_LINE_ID", new Object[] {  new Integer(driverModeratorLineId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'HEALTH_CARE_ID = :healthCareId'.
	 */
	public Employees[] findWhereHealthCareIdEquals(int healthCareId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HEALTH_CARE_ID = ? ORDER BY HEALTH_CARE_ID", new Object[] {  new Integer(healthCareId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public Employees[] findWhereCandidateIdEquals(int candidateId) throws EmployeesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANDIDATE_ID = ? ORDER BY CANDIDATE_ID", new Object[] {  new Integer(candidateId) } );
	}

	/**
	 * Method 'EmployeesDaoImpl'
	 * 
	 */
	public EmployeesDaoImpl()
	{
	}

	/**
	 * Method 'EmployeesDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmployeesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "HRMS.EMPLOYEES";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Employees fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Employees dto = new Employees();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Employees[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Employees dto = new Employees();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Employees ret[] = new Employees[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Employees dto, ResultSet rs) throws SQLException
	{
		dto.setEmployeeId( rs.getInt( COLUMN_EMPLOYEE_ID ) );
		dto.setEmployeeCode( rs.getString( COLUMN_EMPLOYEE_CODE ) );
		dto.setEmployeeFirstName( rs.getString( COLUMN_EMPLOYEE_FIRST_NAME ) );
		dto.setEmployeeMidName( rs.getString( COLUMN_EMPLOYEE_MID_NAME ) );
		dto.setEmployeeLastName( rs.getString( COLUMN_EMPLOYEE_LAST_NAME ) );
		dto.setEmployeeFamilyName( rs.getString( COLUMN_EMPLOYEE_FAMILY_NAME ) );
		dto.setEmployeeBirthDate( rs.getTimestamp(COLUMN_EMPLOYEE_BIRTH_DATE ) );
		dto.setEmployeeNid( rs.getString( COLUMN_EMPLOYEE_NID ) );
		dto.setEmpNidAddress( rs.getString( COLUMN_EMP_NID_ADDRESS ) );
		dto.setPassportId( rs.getInt( COLUMN_PASSPORT_ID ) );
		if (rs.wasNull()) {
			dto.setPassportIdNull( true );
		}
		
		dto.setGender( rs.getString( COLUMN_GENDER ) );
		dto.setEmployeeAddress( rs.getString( COLUMN_EMPLOYEE_ADDRESS ) );
		dto.setEmployeeHomePhone( rs.getString( COLUMN_EMPLOYEE_HOME_PHONE ) );
		dto.setEmployeeMobile( rs.getString( COLUMN_EMPLOYEE_MOBILE ) );
		dto.setEmployeeEmrgPhone( rs.getString( COLUMN_EMPLOYEE_EMRG_PHONE ) );
		dto.setEmployeeEmail( rs.getString( COLUMN_EMPLOYEE_EMAIL ) );
		dto.setEmployeeSmoker( rs.getInt( COLUMN_EMPLOYEE_SMOKER ) );
		if (rs.wasNull()) {
			dto.setEmployeeSmokerNull( true );
		}
		
		dto.setEmployeeOfferDate( rs.getTimestamp(COLUMN_EMPLOYEE_OFFER_DATE ) );
		dto.setEmployeeJoinDate( rs.getTimestamp(COLUMN_EMPLOYEE_JOIN_DATE ) );
		dto.setEmployeeImage( super.getBlobColumn(rs, COLUMN_EMPLOYEE_IMAGE ) );
		dto.setCountryId( rs.getInt( COLUMN_COUNTRY_ID ) );
		dto.setCityId( rs.getInt( COLUMN_CITY_ID ) );
		dto.setReligionId( rs.getInt( COLUMN_RELIGION_ID ) );
		dto.setMaritalStatusId( rs.getInt( COLUMN_MARITAL_STATUS_ID ) );
		dto.setMilitaryStatusId( rs.getInt( COLUMN_MILITARY_STATUS_ID ) );
		dto.setEmpJobId( rs.getInt( COLUMN_EMP_JOB_ID ) );
		dto.setEmployeeTypeId( rs.getInt( COLUMN_EMPLOYEE_TYPE_ID ) );
		dto.setCarLicence( rs.getString( COLUMN_CAR_LICENCE ) );
		dto.setCarLicenceTypeId( rs.getInt( COLUMN_CAR_LICENCE_TYPE_ID ) );
		if (rs.wasNull()) {
			dto.setCarLicenceTypeIdNull( true );
		}
		
		dto.setBloodCategoryId( rs.getInt( COLUMN_BLOOD_CATEGORY_ID ) );
		dto.setEmpStatusId( rs.getInt( COLUMN_EMP_STATUS_ID ) );
		dto.setBusLineAreaId( rs.getInt( COLUMN_BUS_LINE_AREA_ID ) );
		if (rs.wasNull()) {
			dto.setBusLineAreaIdNull( true );
		}
		
		dto.setDriverModeratorLineId( rs.getInt( COLUMN_DRIVER_MODERATOR_LINE_ID ) );
		if (rs.wasNull()) {
			dto.setDriverModeratorLineIdNull( true );
		}
		
		dto.setHealthCareId( rs.getInt( COLUMN_HEALTH_CARE_ID ) );
		if (rs.wasNull()) {
			dto.setHealthCareIdNull( true );
		}
		
		dto.setCandidateId( rs.getInt( COLUMN_CANDIDATE_ID ) );
		if (rs.wasNull()) {
			dto.setCandidateIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Employees dto)
	{
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the specified arbitrary SQL statement
	 */
	public Employees[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmployeesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the EMPLOYEES table that match the specified arbitrary SQL statement
	 */
	public Employees[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmployeesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
