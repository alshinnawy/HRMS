/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.jdbc;

import senior.hrms.emps.dao.*;
import senior.hrms.emps.factory.*;
import java.util.Date;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PassportDetailsDaoImpl extends AbstractDAO implements PassportDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT PASSPORT_ID, PASSPORT_NO, DATE_FROM, DATE_END, ISSUER_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( PASSPORT_ID, PASSPORT_NO, DATE_FROM, DATE_END, ISSUER_ID ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET PASSPORT_ID = ?, PASSPORT_NO = ?, DATE_FROM = ?, DATE_END = ?, ISSUER_ID = ? WHERE PASSPORT_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE PASSPORT_ID = ?";

	/** 
	 * Index of column PASSPORT_ID
	 */
	protected static final int COLUMN_PASSPORT_ID = 1;

	/** 
	 * Index of column PASSPORT_NO
	 */
	protected static final int COLUMN_PASSPORT_NO = 2;

	/** 
	 * Index of column DATE_FROM
	 */
	protected static final int COLUMN_DATE_FROM = 3;

	/** 
	 * Index of column DATE_END
	 */
	protected static final int COLUMN_DATE_END = 4;

	/** 
	 * Index of column ISSUER_ID
	 */
	protected static final int COLUMN_ISSUER_ID = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column PASSPORT_ID
	 */
	protected static final int PK_COLUMN_PASSPORT_ID = 1;

	/** 
	 * Inserts a new row in the PASSPORT_DETAILS table.
	 */
	public PassportDetailsPk insert(PassportDetails dto) throws PassportDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getPassportId() );
			stmt.setString( index++, dto.getPassportNo() );
			stmt.setTimestamp(index++, dto.getDateFrom()==null ? null : new java.sql.Timestamp( dto.getDateFrom().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateEnd()==null ? null : new java.sql.Timestamp( dto.getDateEnd().getTime() ) );
			stmt.setInt( index++, dto.getIssuerId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PassportDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the PASSPORT_DETAILS table.
	 */
	public void update(PassportDetailsPk pk, PassportDetails dto) throws PassportDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getPassportId() );
			stmt.setString( index++, dto.getPassportNo() );
			stmt.setTimestamp(index++, dto.getDateFrom()==null ? null : new java.sql.Timestamp( dto.getDateFrom().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateEnd()==null ? null : new java.sql.Timestamp( dto.getDateEnd().getTime() ) );
			stmt.setInt( index++, dto.getIssuerId() );
			stmt.setInt( 6, pk.getPassportId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PassportDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the PASSPORT_DETAILS table.
	 */
	public void delete(PassportDetailsPk pk) throws PassportDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getPassportId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PassportDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the PASSPORT_DETAILS table that matches the specified primary-key value.
	 */
	public PassportDetails findByPrimaryKey(PassportDetailsPk pk) throws PassportDetailsDaoException
	{
		return findByPrimaryKey( pk.getPassportId() );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public PassportDetails findByPrimaryKey(int passportId) throws PassportDetailsDaoException
	{
		PassportDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE PASSPORT_ID = ?", new Object[] {  new Integer(passportId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria ''.
	 */
	public PassportDetails[] findAll() throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY PASSPORT_ID", null );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'ISSUER_ID = :issuerId'.
	 */
	public PassportDetails[] findByIssuers(int issuerId) throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ISSUER_ID = ?", new Object[] {  new Integer(issuerId) } );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public PassportDetails[] findWherePassportIdEquals(int passportId) throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSPORT_ID = ? ORDER BY PASSPORT_ID", new Object[] {  new Integer(passportId) } );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'PASSPORT_NO = :passportNo'.
	 */
	public PassportDetails[] findWherePassportNoEquals(String passportNo) throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSPORT_NO = ? ORDER BY PASSPORT_NO", new Object[] { passportNo } );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'DATE_FROM = :dateFrom'.
	 */
	public PassportDetails[] findWhereDateFromEquals(Date dateFrom) throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_FROM = ? ORDER BY DATE_FROM", new Object[] { dateFrom==null ? null : new java.sql.Timestamp( dateFrom.getTime() ) } );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'DATE_END = :dateEnd'.
	 */
	public PassportDetails[] findWhereDateEndEquals(Date dateEnd) throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_END = ? ORDER BY DATE_END", new Object[] { dateEnd==null ? null : new java.sql.Timestamp( dateEnd.getTime() ) } );
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the criteria 'ISSUER_ID = :issuerId'.
	 */
	public PassportDetails[] findWhereIssuerIdEquals(int issuerId) throws PassportDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ISSUER_ID = ? ORDER BY ISSUER_ID", new Object[] {  new Integer(issuerId) } );
	}

	/**
	 * Method 'PassportDetailsDaoImpl'
	 * 
	 */
	public PassportDetailsDaoImpl()
	{
	}

	/**
	 * Method 'PassportDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public PassportDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "HRMS.PASSPORT_DETAILS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PassportDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PassportDetails dto = new PassportDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PassportDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PassportDetails dto = new PassportDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PassportDetails ret[] = new PassportDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PassportDetails dto, ResultSet rs) throws SQLException
	{
		dto.setPassportId( rs.getInt( COLUMN_PASSPORT_ID ) );
		dto.setPassportNo( rs.getString( COLUMN_PASSPORT_NO ) );
		dto.setDateFrom( rs.getTimestamp(COLUMN_DATE_FROM ) );
		dto.setDateEnd( rs.getTimestamp(COLUMN_DATE_END ) );
		dto.setIssuerId( rs.getInt( COLUMN_ISSUER_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PassportDetails dto)
	{
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the specified arbitrary SQL statement
	 */
	public PassportDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws PassportDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PassportDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the PASSPORT_DETAILS table that match the specified arbitrary SQL statement
	 */
	public PassportDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws PassportDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PassportDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
