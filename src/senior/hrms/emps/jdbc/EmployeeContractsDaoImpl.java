/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package senior.hrms.emps.jdbc;

import senior.hrms.emps.dao.*;
import senior.hrms.emps.factory.*;
import java.util.Date;
import java.math.BigDecimal;
import senior.hrms.emps.dto.*;
import senior.hrms.emps.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmployeeContractsDaoImpl extends AbstractDAO implements EmployeeContractsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT EMP_CONTRACT_ID, CONTRACT_CODE, EMPLOYEE_ID, START_DATE, END_DATE, BASIC_SALARY, ALLOWANCE_VALUE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( EMP_CONTRACT_ID, CONTRACT_CODE, EMPLOYEE_ID, START_DATE, END_DATE, BASIC_SALARY, ALLOWANCE_VALUE ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET EMP_CONTRACT_ID = ?, CONTRACT_CODE = ?, EMPLOYEE_ID = ?, START_DATE = ?, END_DATE = ?, BASIC_SALARY = ?, ALLOWANCE_VALUE = ? WHERE EMP_CONTRACT_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE EMP_CONTRACT_ID = ?";

	/** 
	 * Index of column EMP_CONTRACT_ID
	 */
	protected static final int COLUMN_EMP_CONTRACT_ID = 1;

	/** 
	 * Index of column CONTRACT_CODE
	 */
	protected static final int COLUMN_CONTRACT_CODE = 2;

	/** 
	 * Index of column EMPLOYEE_ID
	 */
	protected static final int COLUMN_EMPLOYEE_ID = 3;

	/** 
	 * Index of column START_DATE
	 */
	protected static final int COLUMN_START_DATE = 4;

	/** 
	 * Index of column END_DATE
	 */
	protected static final int COLUMN_END_DATE = 5;

	/** 
	 * Index of column BASIC_SALARY
	 */
	protected static final int COLUMN_BASIC_SALARY = 6;

	/** 
	 * Index of column ALLOWANCE_VALUE
	 */
	protected static final int COLUMN_ALLOWANCE_VALUE = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column EMP_CONTRACT_ID
	 */
	protected static final int PK_COLUMN_EMP_CONTRACT_ID = 1;

	/** 
	 * Inserts a new row in the EMPLOYEE_CONTRACTS table.
	 */
	public EmployeeContractsPk insert(EmployeeContracts dto) throws EmployeeContractsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getEmpContractId() );
			stmt.setString( index++, dto.getContractCode() );
			stmt.setInt( index++, dto.getEmployeeId() );
			stmt.setTimestamp(index++, dto.getStartDate()==null ? null : new java.sql.Timestamp( dto.getStartDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getEndDate()==null ? null : new java.sql.Timestamp( dto.getEndDate().getTime() ) );
			stmt.setBigDecimal( index++, dto.getBasicSalary() );
			stmt.setBigDecimal( index++, dto.getAllowanceValue() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeeContractsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the EMPLOYEE_CONTRACTS table.
	 */
	public void update(EmployeeContractsPk pk, EmployeeContracts dto) throws EmployeeContractsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getEmpContractId() );
			stmt.setString( index++, dto.getContractCode() );
			stmt.setInt( index++, dto.getEmployeeId() );
			stmt.setTimestamp(index++, dto.getStartDate()==null ? null : new java.sql.Timestamp( dto.getStartDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getEndDate()==null ? null : new java.sql.Timestamp( dto.getEndDate().getTime() ) );
			stmt.setBigDecimal( index++, dto.getBasicSalary() );
			stmt.setBigDecimal( index++, dto.getAllowanceValue() );
			stmt.setInt( 8, pk.getEmpContractId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeeContractsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the EMPLOYEE_CONTRACTS table.
	 */
	public void delete(EmployeeContractsPk pk) throws EmployeeContractsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getEmpContractId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeeContractsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the EMPLOYEE_CONTRACTS table that matches the specified primary-key value.
	 */
	public EmployeeContracts findByPrimaryKey(EmployeeContractsPk pk) throws EmployeeContractsDaoException
	{
		return findByPrimaryKey( pk.getEmpContractId() );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMP_CONTRACT_ID = :empContractId'.
	 */
	public EmployeeContracts findByPrimaryKey(int empContractId) throws EmployeeContractsDaoException
	{
		EmployeeContracts ret[] = findByDynamicSelect( SQL_SELECT + " WHERE EMP_CONTRACT_ID = ?", new Object[] {  new Integer(empContractId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria ''.
	 */
	public EmployeeContracts[] findAll() throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY EMP_CONTRACT_ID", null );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmployeeContracts[] findByEmployees(int employeeId) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ID = ?", new Object[] {  new Integer(employeeId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMP_CONTRACT_ID = :empContractId'.
	 */
	public EmployeeContracts[] findWhereEmpContractIdEquals(int empContractId) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_CONTRACT_ID = ? ORDER BY EMP_CONTRACT_ID", new Object[] {  new Integer(empContractId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'CONTRACT_CODE = :contractCode'.
	 */
	public EmployeeContracts[] findWhereContractCodeEquals(String contractCode) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACT_CODE = ? ORDER BY CONTRACT_CODE", new Object[] { contractCode } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public EmployeeContracts[] findWhereEmployeeIdEquals(int employeeId) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYEE_ID = ? ORDER BY EMPLOYEE_ID", new Object[] {  new Integer(employeeId) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'START_DATE = :startDate'.
	 */
	public EmployeeContracts[] findWhereStartDateEquals(Date startDate) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE START_DATE = ? ORDER BY START_DATE", new Object[] { startDate==null ? null : new java.sql.Timestamp( startDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'END_DATE = :endDate'.
	 */
	public EmployeeContracts[] findWhereEndDateEquals(Date endDate) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE END_DATE = ? ORDER BY END_DATE", new Object[] { endDate==null ? null : new java.sql.Timestamp( endDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'BASIC_SALARY = :basicSalary'.
	 */
	public EmployeeContracts[] findWhereBasicSalaryEquals(BigDecimal basicSalary) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BASIC_SALARY = ? ORDER BY BASIC_SALARY", new Object[] { basicSalary } );
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the criteria 'ALLOWANCE_VALUE = :allowanceValue'.
	 */
	public EmployeeContracts[] findWhereAllowanceValueEquals(BigDecimal allowanceValue) throws EmployeeContractsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ALLOWANCE_VALUE = ? ORDER BY ALLOWANCE_VALUE", new Object[] { allowanceValue } );
	}

	/**
	 * Method 'EmployeeContractsDaoImpl'
	 * 
	 */
	public EmployeeContractsDaoImpl()
	{
	}

	/**
	 * Method 'EmployeeContractsDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmployeeContractsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "HRMS.EMPLOYEE_CONTRACTS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmployeeContracts fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmployeeContracts dto = new EmployeeContracts();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmployeeContracts[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmployeeContracts dto = new EmployeeContracts();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmployeeContracts ret[] = new EmployeeContracts[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmployeeContracts dto, ResultSet rs) throws SQLException
	{
		dto.setEmpContractId( rs.getInt( COLUMN_EMP_CONTRACT_ID ) );
		dto.setContractCode( rs.getString( COLUMN_CONTRACT_CODE ) );
		dto.setEmployeeId( rs.getInt( COLUMN_EMPLOYEE_ID ) );
		dto.setStartDate( rs.getTimestamp(COLUMN_START_DATE ) );
		dto.setEndDate( rs.getTimestamp(COLUMN_END_DATE ) );
		dto.setBasicSalary( rs.getBigDecimal(COLUMN_BASIC_SALARY));
		dto.setAllowanceValue( rs.getBigDecimal(COLUMN_ALLOWANCE_VALUE));
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmployeeContracts dto)
	{
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the specified arbitrary SQL statement
	 */
	public EmployeeContracts[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmployeeContractsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeeContractsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the EMPLOYEE_CONTRACTS table that match the specified arbitrary SQL statement
	 */
	public EmployeeContracts[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmployeeContractsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmployeeContractsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
